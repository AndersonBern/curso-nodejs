NODEJS

O nodeJS é um programa que lê e interpreta JavaScript na sua 
maquina. Funciona em módulos e pacotes.


NO TERMINAL(Crtl + '')

cls: Para limpar o terminal.

node nomeDoArquivo.js: Para executar o seu código JS.


PALAVRAS-CHAVE

* Globais: Funciona em qualquer parte do escopo do meu projeto.

	- process : Objeto que fornece unformações sobre o 
		    processo que está sendo executado.

	- console : Semelhante ao navegador. Fornece Retorno.


* Pseudo-Globais: Funciona no escopo do arquivo que está sendo 
  		  executado.

	- module : Objeto que pertence ao sistema de modulos 
		   do node.

	- __filename : A palavra-chave que contém o caminho 
		       do arquivo de execução atual. 

	- __dirname : A palavra-chave que contém o caminho para 
		      o diretório raiz atual.

	- require() : Função que permite incluir módulos válidos.



MÓDULOS / PACOTES

1 - Módulos incorporados -> Built-in Modules (NATIVOS).

2 - Módulos Locais -> Local Modules (QUE A GENTE CONSTRÓI).

3 - Módulos de Terceiros -> Third Party Modules 
   (QUE OUTROS FIZERAM).


PARA FAZER UM REQUERIMENTO DE MODULOS LOCAIS:

1- Você vai criar um código com algo como uma função, por exemplo.
   E você vai exportar essa função em MODULO como um OBJETO{}:

	ex.: 
		function somar(a, b) {
    			return a + b;
		}

		module.exports = {somar};

	OBS.: SEMPRE EXPORTE A FUNÇÃO COMO UM OBJETO.

3- Depois de exportar o modulo com a função, EM OUTRO ARQUIVO,
   você vai fazer o REQUERIMENTO deste modulo.

	ex.: const calculo = require('localDoArquivo.js');

	OBS.: SEMPRE FAÇA O REQUERIMENTO DENTRO DE UMA 
	      VARIAVEL OU CONSTANTE. 
	      
4- Para chamar a função do modulo que foi requerido use:
   - nomeDaVariavel.nomeDaFunção().

	ex.: calculo.somar(5, 2).

4- Pronto, você fez um requerimento de uma função que estava 
   em outro arquivo.




MÉTODO MAIS MODERNO PARA EXPORTAR E IMPORTAR MODULOS

* export {objeto}: Para exportar o modulo.

* import {objeto} from './localDoArquivo.js' : Para importar o 
					     modulo.


PARA EXPORTAR O OBJETO {CALCULADORA}:

ex.: const calculadora = {
    	somar: function(a, b){
        return a + b;
    	}
     }

     export {calculadora};

	

PARA IMPORTAR O MODULO {CALCULADORA}:

ex.: import {calculadora} from './modules/calculadora.js';

OBS.: Você pode importar quantos modulos quiser dentro das chaves. 


PARA CHAMAR O MODULO {CALCULADORA}:

ex.: console.log(calculadora.somar(5, 2));



MODULOS NATIVOS

http : Modulo de WEB SERVER.

    * PARA CRIAR UM SERVER:

	1- Importa e faz a requisição do modulo 'http'.

		- const http = require('http');


	2- É necessário dar 2 parametros para o servidor:

		- HOSTNAME(Local onde o servidor é hospedado).

		- PORTA(é a porta de acesso, para conceder a 
	   	  permissão para acessar o servidor).


	3- Cria o HOSTNAME.

		- const hostname = '127.0.0.1';

		O endereço de IP: 127.0.0.1 é o endereço padrão 
		para uma maquina local. Também pode se usar o 
		valor: 'localhost'.


	4- Cria a PORTA.

		- const PORT = process.env.PORT || 3000;

		Por padrão cria-se a constante/variável em letras
		maiúculas.

		* process.env :
		É um objeto que contém as variáveis de ambiente do
		sistema em que o Node.js está sendo executado. 
		
		* .PORT :	
		Refere-se a uma constante/variável de ambiente que
		define o número da porta que um servidor ou 
		aplicação web deve usar para ouvir conexões de 
		rede.

		* || 3000 : 
		Refere-se a uma porta padrão caso a porta definida
		anteriormente não funcione. Lê-se: OU porta 3000.

	5- Cria o SERVIDOR.

		- const server = http.createServer(
    			function(req, res){
        
    			}
		  );

		* http.createServer() :
		Com o modulo 'http' utilizamos o método 
		'.createServer()' para criar o servidor, e dentro
		dos parenteses definimos oque vai acontecer quando
		o servidor for chamado.

		* function(req, res){} :
		A função que vai ser executada. e os parametros:
		'req' = REQUISIÇÃO, 'res' = RESPOSTA. 
		Para determinar o que vai receber como requisição
		do servidor e a resposta do servidor.

	6- inicializar o SERVIDOR.

		- server.listen(PORT, hostname, function(){
    			console.log(`Servidor rodando em: 
			http//:${hostname}:${PORT}`)
		  })

		* server.listen() :
		Para inicializar o servidor. E dentro do método
		vão 3 parametros: 
			-> PORTA;
			-> HOSTNAME;
			-> FUNÇÃO DE RETORNO.
		(Para determinar oq vai acontecer quando SERVER 
		for iniciado.)
		Que no caso vai ser um 'console.log'.


	PARA ADICIONAR UMA RESPOSTA NO SERVIDOR:

	ex.: const server = http.createServer(
     		function(req, res){
        		res.statusCode = 200;
    		}
     	     );

	O parametro 'res' é para a resposta. E com o metodo '.statusCode'
	damos um código que pode significar algumas coisas como:
	
		- res.statusCode = 200; : OK.

		- res.statusCode = 201; : Created, Para 
					  requisições tipo POST.

		- res.statusCode = 404; : NOT FOUND.


	PARA RESPONDER COM UM CABEÇALHO:

	ex.: res.setHeader('Content-type', 'text/html; 
	     charset= utf-8');
     	     res.end('<h1>Hello world!</h1>');
	
		.setHeader(): Para responder com um cabeçalho.
		E os paremetros:
			- 1: Tipo do conteúdo.
			- 2: Formato do conteúdo.
		Neste caso o tipo de conteúdo foi 'texto/HTML' e 
		'charset' para ler caracteres com acentos.

		* .end(): É um método que finaliza uma requisição
			  HTTP. Neste caso retornou um <H1>.


	PARA DAR RESPOSTAS DIFERENTES EM URL'S DIFERENTES:

	ex.: let url = req.url;

     	if(url === '/'){
     		res.statusCode = 200;
        	res.setHeader('Content-type', 'text/html');
        	res.end('<h1>Hello world!</h1>');
     	}
     	if (url ==='/sobre'){
         	res.statusCode = 200;
         	res.setHeader('Content-type', 'text/html');
         	res.end('<h1>Página SOBRE!</h1>');
     	}


	* let url = req.url : Para dar o valor da URL a variavel.

	* if(url === '/') : Se a URL for igual a '/' 
	   (PAGINA INICIAL), vai dar a resposta.

	* if (url ==='/sobre') : Se a URL for igual a '/sobre',
	  vai dar a resposta.


PARA NÃO SER NECESSÁRIO FICAR REINICIANDO O SERVIDOR TODA VEZ QUE
FIZER UMA ALTERAÇÃO:

- nodemon nomeDoArquivo(NO TERMINAL) : Assim vai ser o servidor 
				       ser atualizado 
				       automaticamente.


MANIPULAÇÃO DE PASTAS

fs: Modulo FILE SYSTEM. Para manipulação de pastas e arquivos.

	ex.: const fs = require('fs');
	
	Para fazer o requerimento do módulo FileSystem.


	* fs.existsSync() : Para VERIFICAR se uma pasta EXISTE.

	* fs.mkdirSync() : Para CRIAR uma pasta.

	* fs.renameSync() : Para RENOMEAR uma pasta.

	* fs.rm() : Para DELETAR uma pasta.
	
	* fs.rmdir(): Para DELETAR uma pasta VAZIA.


	EXEMPLO de CRIAR pasta:
	 
		- if(!fs.existsSync('./public')) {
    			fs.mkdirSync('./public', (err) =>{
        			if(err) {
            				throw err;
        			}
        			console.log('Pasta criada com 
				sucesso!');
    			})
		  }

		1 - if(!fs.existsSync('./public')):
		SE NÃO(!) EXISTIR A PASTA ./public...

		2 - fs.mkdirSync('./public', (err) =>{} :
		CRIA A PASTA ./public, e a função para determinar
		o que vai acontecer quando criar a pasta. 

		  * 'err': Como parametro, REFERE-SE ao ERRO.

		3- if(err){} :
		SE EXISTIR ERRO(err)...

		4- throw err; :
		Vai MOSTAR o erro no terminal.
		  * throw: Interrupção de Fluxo.(Como o 'return')

		5- console.log('Pasta criada com sucesso!'); :
		SE NÃO TIVER ERRO, vai mostar a mensagem.
		
		
	EXEMPLO de RENOMEAR pasta:

		- if(fs.existsSync('./public')) {
    			fs.renameSync('./public', './bernardo', 
			(err) =>{
        			if(err) {
            				throw err;
        			}
        			console.log('Pasta RENOMEADA com 
				sucesso!');

    			})
		  }

		1- if(fs.existsSync('./public')) {} :
		SE EXISTIR A PASTA ./public...

		2- fs.renameSync('./public', './bernardo', 
		   (err) =>{} :
		RENOMEIA A PASTA ./public, PARA ./bernardo, e a
		função que determina oque vai acontecer quando 
		renomear a pasta.
		  * 'err': Como parametro, REFERE-SE ao ERRO.

		3- if(err) {} :
		SE TIVER ERRO...

		4- throw err; :
		Vai MOSTAR o erro no terminal.
		  * throw: Interrupção de Fluxo.(Como o 'return')

		5- console.log('Pasta RENOMEADA com sucesso!'); :
		SE NÃO TIVER ERRO, vai mostrar a mensagem.

	
	EXEMPLO de DELETAR pasta COM ARQUIVOS:

		- if(fs.existsSync('./bernardo')) {
    			fs.rm('./bernardo', {recursive: true},
			(err) =>{
        			if(err) {
            				throw err;
        			}
        			console.log('Pasta DELETADA com 
				sucesso!');

    			})
		}

		
		1- if(fs.existsSync('./bernardo')) {} :
		SE EXISTIR A PASTA ./bernardo...

		2- fs.rm('./bernardo', {recursive: true}, 
		   (err) =>{} :
		- DELETA A PASTA ./bernardo, 
		- TAMBÉM OS ARQUIVOS RECURSIVOS,
		- E a função que determina oque vai acontecer 
		  quando renomear a pasta.

		  * 'err': Como parametro, REFERE-SE ao ERRO.
		  * Se você não especificar a opção 
		    recursive: true, fs.rm() apenas removerá 
		    arquivos e diretórios vazios.

		3- if(err) {} :
		SE TIVER ERRO...

		4- throw err; :
		Vai MOSTAR o erro no terminal.
		  * throw: Interrupção de Fluxo.(Como o 'return')

		5- console.log('Pasta DELETADA com sucesso!'); :
		SE NÃO TIVER ERRO, vai mostrar a mensagem.


	EXEMPLO DELETAR uma pasta VAZIA:

		- fs.rmdir('./bernardo', (err) =>{} :

		Assim vai apagar a pasta se ela estiver VAZIA.


MANIPULAÇÃO DE ARQUIVOS

    CRIAR/ATUALIZAR:

	* fs.writeFile() : Substitui o ARQUIVO E O CONTEÚDO caso 
			   ele já exista, e se não existir, cria 
			   um novo arquivo com o conteúdo que vc
			   passar.

		ex.: 

		fs.writeFile('teste.txt', 'teste de conteúdo!', 
		(err)=>{
    			if(err){
        			throw err;
   			 }
   		 	console.log('Arquivo criado com sucesso!');
		})


	     EXPLICAÇÃO POR LINHA:

		1- fs.writeFile('teste.txt', 'teste', (err)=>{}) :
		Cria o arquivo, com 3 parametros:
			- 'teste.txt': NOME DO ARQUIVO;
			- 'teste': CONTEÚDO;
			- (err)=>{}: FUNÇÃO PARA DETERMINAR O QUE
				     ACONTECE QUANDO CRIA ARQUIVO.
		
		2- if(err){} : SE TIVER ERRO...

		3- throw err; : MOSTRA O ERRO.

		4- console.log('Arquivo criado com sucesso!');
		SE NÃO TIVER ERRO, mostra a mensagem.

	OBS.: CUIDADO ao usar este método, pois ele pode 
	      SOBRESCREVER o arquivo caso ele já exista. SEMPRE
	      faça uma verificação antes:
		
			ex.: if(!fs.existsSync('teste.txt')){...}
			SE NÃO EXISTIR O ARQUIVO 'teste.txt'...



     * fs.appendFile() : Adiciona conteúdo ao arquivo, se o
			    arquivo não existir ele cria.

		ex.: 
		fs.appendFile('teste.txt', 'Conteúdo ADICIONADO',
		(err)=>{
    			if(err){
        			throw err;
    			}
    			console.log('Arquivo ATUALIZADO!');
		})

	     EXPLICAÇÃO POR LINHA:

		1- fs.appendFile('teste.txt', 'teste', (err)=>{}) :
		ADICIONA CONTEÚDO ao arquivo(OU CRIA) SEM 
		SOBRESCREVER. Com 3 parametros:
			- 'teste.txt': NOME DO ARQUIVO;
			- 'teste': CONTEÚDO;
			- (err)=>{}: FUNÇÃO PARA DETERMINAR O QUE
				     ACONTECE QUANDO CRIA ARQUIVO.
		
		2- if(err){} : SE TIVER ERRO...

		3- throw err; : MOSTRA O ERRO.

		4- console.log('Arquivo ATUALIZADO!');
		SE NÃO TIVER ERRO, mostra a mensagem.
		
	OBS.: MÉTODO MAIS RECOMENDADO, pois não há risco de perca
	      de arquivos, já que este método não SOBRESCREVE nada.



     * fs.open() : Abre um arquivo para leitura, se o arquivo 
		      não existir ele cria um VAZIO. Para criar um 
		      arquivo usar a flag 'w'(writing) para 
		      escrita. 

		ex.: 
		fs.open('arquivo.txt', 'w', (err, file)=>{
    			if(err) {
        			throw err;
    			}
    			console.log('Salvo!')
		})

	     EXPLICAÇÃO POR LINHA:

		1- fs.open('arquivo.txt', 'w', (err, file)=>{} :
		CRIA ARQUIVO VAZIO. Com 3 parametros:
			- 'arquivo.txt': NOME DO ARQUIVO;
			- 'w': FLAG para WRITING(escrever);
			- (err, file)=>{}: FUNÇÃO PARA DETERMINAR
					   O QUE ACONTECE QUANDO 
					   CRIA ARQUIVO.
		
		2- if(err){} : SE TIVER ERRO...

		3- throw err; : MOSTRA O ERRO.

		4- console.log('Salvo!')
		SE NÃO TIVER ERRO, mostra a mensagem.

	OBS.: MÉTODO NÃO RECOMENDADO, pois este método é melhor
	      para ABRIR arquivos, e não para CRIAR arquivos.


    RENOMEAR/DELETAR:

     * fs.rename(): Renomear arquivos.

		ex.: 
		fs.rename('arquivo.txt', 'bernardo.txt', (err)=>{
    			if(err) {
        			throw err;
    			}
    			console.log('Arquivo RENOMEADO!');
		});

	    EXPLICAÇÃO POR LINHA:

		1- fs.rename('arquivo.txt', 'bernardo.txt', 
		   (err)=>{} :
		RENOMEIA o ARQUIVO, com 3 parametros:
			- 'arquivo.txt': NOME DO ARQUIVO;
			- 'bernardo.txt': NOVO nome do arquivo;
			- (err)=>{}: FUNÇÃO CALLBACK.

		2- if(err){} : SE TIVER ERRO...

		3- throw err; : MOSTRA O ERRO.

		4- console.log('Arquivo RENOMEADO!');
		SE NÃO TIVER ERRO, mostra a mensagem.

	OBS.: É INTERESSSANTE verificar se o arquivo que você 
	      deseja renomear EXISTE:

		ex.: if(fs.existsSync('arquivo.txt')){...} :
		SE O ARQUIVO 'arquivo.txt' EXISTE...

	
     * fs.unlink() : EXCLUIR ARQUIVO.

		ex.: 
		fs.unlink('bernardo.txt', (err)=>{
    			if(err) {
       				throw err;
    			}
    			console.log('Arquivo DELETADO!');
		});

	     EXPLICAÇÃO POR LINHA:

		1- fs.unlink('bernardo.txt', (err)=>{} :
		DELETA o ARQUIVO, com 2 parametros:
			- 'bernardo.txt': NOME DO ARQUIVO;
			- (err)=>{}: FUNÇÃO CALLBACK.

		2- if(err){} : SE TIVER ERRO...

		3- throw err; : MOSTRA O ERRO.

		4- console.log('Arquivo DELETADO!');
		SE NÃO TIVER ERRO, mostra a mensagem.

	OBS.: É INTERESSSANTE verificar se o arquivo que você 
	      deseja renomear EXISTE.


    LER ARQUIVOS:

       * fs.readFile() : Ler arquivo.

		ex.: 
		fs.readFile('projeto-node/public/index.html', 
		(err, content)=> {
                	if(err) {
                    		throw err;
               		}
                	res.setHeader('Content-type', 'text/html');
                	res.end(content);
           	});

	     EXPLICAÇÃO POR LINHA:
		
		1- fs.readFile('projeto-node/public/index.html', 
		   (err, content)=> {} :
		LER ARQUIVO, com 2 parametros:
			- LOCAL DO ARQUIVO;
			- FUNÇÃO CALLBACK com 2 parametros:
				- err: ERRO;
				- content: CONTEÚDO.
			
		2- if(err){} : SE TIVER ERRO...

		3- throw err; : MOSTRA O ERRO.

		4-  res.setHeader('Content-type', 'text/html'); :
		ADICIONA um cabeçalho ao SERVIDOR, com 2 param.:
			- TIPO DO CONTEÚDO;
			- FORMATO DO CONTEÚDO;
		
		5- res.end(content); :
		FINALIZA A REQUISIÇÃO e mostra o CONTEÚDO do 
		arquivo LIDO (index.html).
		




EXPRESS

Express é um Framework para nodeJS minimalista que diminui linhas
de código por já ter vários modulos dentro dele.

EXEMPLO DE CRIAÇÃO DE SERVIDOR:

	- const express = require('express');

	  const app = express();

	  const PORT = process.env.PORT || 3000;

	  app.get('/', (req, res) => {
    		res.send('<h1>Hello World!</h1>');
	  });

	  app.listen(PORT, ()=> {
    		console.log(`Servidor rodando em http://localhost:
		${PORT}`);
	  });


* const express = require('express'); : Para fazer a REQUISIÇÃO
					do EXPRESS.


* const app = express(); : Constante PADRÃO para pegar todos o
			   conteúdo de dentro do Express. Esta
			   constante é por onde faremos o uso de
			   todas as funções do Express.


* const PORT = process.env.PORT || 3000; : Da mesma forma que o 
					   método 'http', é 
				  	   necessário criar uma
					   PORTA para o servidor.


* app.get('/', (req, res) => {} : Para definir ROTAS. Neste caso
				  PEGAR(get), a pagina 
				  principal('/') e mostrar algo.
				  Por padrão a função de tem 2 
				  parametros 'req' e 'res' onde 
				  a RESposta será mostrada pelo
				  parametro 'res'.

			Parametros:
				1- Pagina;
				2- Função;


*  res.send('<h1> ... </h1>'); : O metodo .send serve para ENVIAR
				  algo como resposta('res'), neste
				  caso, para a página PRINCIPAL. 
				  Que no caso foi um <h1>.


* app.listen(PORT, ()=> {} : Para dar START ao servidor. Basta 
			     apenas indicar a PORTA nos parametros
			     mas se for necessário podemos 
			     utilizar uma função de CALLBACK.



PARA ENVIAR UM ARQUIVO COMO RESPOSTA:


* res.sendFile(__dirname + '/public/index.html'); :


	- .sendFile() : Para ENVIAR um ARQUIVO.

	- __dirname : Para dar o local ABSOLUTO do ARQUIVO.
		      É necessário SEMPRE dar o local absoluto.

	- + '/LocalDoArquivo.html' : É necessário CONCATENAR(+),
	  			     pois antes veio o modulo 
				     '__dirname' e dar o local do
	  			     arquivo.


PARA CRIAR ROTAS COM PAGINAS DIFERENTES NO SERVIDOR:

- A ROTA de exemplo: carros/fiat/uno

	1- Crie um novo arquivo .js(javascript) para criar as 
	   rotas.

	2- Faça a requisição do EXPRESS:
		
		- const express = require('express');

	3- Crie uma constante/variavel para pegar o MÉTODO 
	   expecifico para ROTAS.

		- const router = express.Router();
		
		.Router : É o MÉTODO do express próprio para rotas.

	4- Crie as rotas:
	
		- router.get('/', (req, res)=> {...}

		ROTA PARA '/'(PAGINA PRINCIPAL)...

		- router.get('/fiat', (req, res)=> {...}

		ROTA PARA '/fiat'...

		- router.get('/fiat/uno', (req, res)=> {...} 
		
		ROTA PARA '/fiat/uno'

	5- EXPORTE AS ROTAS COMO MODULO PARA O SEU SERVIDOR:

		- module.exports = router;

		LEMBRANDO 'router' é a constante das rotas...


    NO SCRIPT DO SERVIDOR...

	6- FAÇA A REQUISIÇÃO DO MODULO DAS ROTAS CRIADAS.

		- const rotas = require('./routes/carros.js');
		
		obs.: SEMPRE dê o local do arquivo onde se 
		      encontra o SEU modulo de rotas.

	7- CHAME AS ROTAS DO SEU MODULO:

		- app.use('/carros', rotas);

		   * .use : serve para usar uma rota de um módulo 
			 externo.

		   * '/carros' : É a rota onde você quer que a 
				 pagina principal('/') do seu 
				 módulo comece.

		   * rotas : é a constante onde foi feita a 
		 	     requisição do módulo das rotas.

	8- Agora a página principal das suas rotas é '/carros'.
	   Para acessar as outras páginas basta digitar na barra:

		- carros/fiat : Para a página fiat.

		- carros/fiat/uno : Para a página Uno.

	SCRIPT DO EXEMPLO:
	
		- curso-nodejs/projeto-node/routes/carros.js

	SCRIPT DO SERVIDOR EXPRESS: 
	
		- curso-nodejs/projeto-node/express.js
		
    
   
 